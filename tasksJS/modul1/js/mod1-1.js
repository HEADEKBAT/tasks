

// задача 1
// Что будет выведено в консоль?

Promise.resolve()
.then(() => {
    console.log("1 then");
    throw "Oh no!";
})
.catch(reason => {
    console.error("1 catch");
})
.catch(reason => {
    console.error("2 catch");
})
.then(() =>{
    console.log("2 then");
});




// объяснение 

// Promise.resolve()
// Здесь создаётся промис, который сразу же переходит в состояние resolved (исполнен). Он передаёт значение undefined следующему обработчику .then().

// Первый .then()
// Этот обработчик получает исполненный промис. В его функции выполняется:

// Вывод в консоль: console.log('1 then'); → в консоли появляется "1 then".
// Затем происходит throw 'Oh no!'; – выбрасывается исключение. Это приводит к тому, что промис переходит в состояние rejected с причиной 'Oh no!'.
// Первый .catch()
// Этот блок перехватывает ошибку, возникшую в предыдущем .then(). Он получает значение ошибки ('Oh no!'), но его функция:

// Выводит сообщение об ошибке: console.error('1 catch'); → в консоли появляется "1 catch".
// После выполнения обработчика промис считается resolved (если функция ничего не возвращает явно, возвращается undefined). То есть ошибка обработана.
// Второй .catch()
// Этот обработчик предназначен для перехвата ошибок, если они возникнут после первого .catch(). Но поскольку предыдущий .catch() уже обработал ошибку и промис находится в состоянии resolved, этот блок не выполняется. Следовательно, в консоль не выводится "2 catch".

// Последний .then()
// После цепочки обработчиков, промис находится в состоянии resolved. Поэтому вызывается последний .then(), который выполняет:

// Вывод в консоль: console.log('2 then'); → в консоли появляется "2 then".









// ответ

// 1 then
// 1 catch
// 2 then